basePath: /
definitions:
  models.Announcement:
    properties:
      create_date:
        type: string
      end_date:
        type: string
      id:
        type: integer
      owner_id:
        type: integer
      start_date:
        type: string
      status:
        $ref: '#/definitions/models.Status'
      text:
        type: string
    type: object
  models.Status:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      Accepted: "1"
      Active: "3"
      Deactivated: "4"
      Declined: "2"
      Pending: "0"
    x-enum-varnames:
    - Pending
    - Accepted
    - Declined
    - Active
    - Deactivated
  models.User:
    properties:
      address:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  utils.AnnouncementSuccessResponse:
    properties:
      announcement:
        $ref: '#/definitions/models.Announcement'
      message:
        type: string
    type: object
  utils.DeleteSuccessResponse:
    properties:
      message:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        description: The error message
        type: string
    type: object
  utils.LoginData:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  utils.LoginSuccessResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  utils.UserSuccessResponse:
    properties:
      message:
        description: The success message
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: The user data
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: AnnounceIT is a solution for broadcasting agencies to receive and manage
    announcements effectively.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: AnnounceIT API
  version: "1.0"
paths:
  /announcements:
    get:
      description: Retrieve all announcements
      produces:
      - application/json
      responses:
        "200":
          description: Announcements retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.Announcement'
            type: array
        "500":
          description: Could not fetch announcements
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all announcements
      tags:
      - Announcements
    post:
      consumes:
      - application/json
      description: Create an announcement and save it to the database
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Announcement object
        in: body
        name: announcement
        required: true
        schema:
          $ref: '#/definitions/models.Announcement'
      produces:
      - application/json
      responses:
        "201":
          description: Announcement created successfully
          schema:
            $ref: '#/definitions/utils.AnnouncementSuccessResponse'
        "400":
          description: Could not parse request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Authorization token is required or invalid
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create an announcement
      tags:
      - Announcements
  /announcements/{id}:
    delete:
      description: Deletes an existing announcement by its ID. The user must be the
        owner of the announcement to delete it.
      parameters:
      - description: Announcement ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: Announcement deleted successfully
          schema:
            $ref: '#/definitions/utils.DeleteSuccessResponse'
        "400":
          description: Invalid announcement ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: You are not allowed to delete this announcement
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Announcement not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Could not delete announcement
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete an announcement
      tags:
      - Announcements
    get:
      description: Retrieve an announcement by its ID
      parameters:
      - description: Announcement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Announcement retrieved successfully
          schema:
            $ref: '#/definitions/utils.AnnouncementSuccessResponse'
        "400":
          description: Invalid announcement ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Announcement not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a single announcement
      tags:
      - Announcements
    patch:
      description: Updates an existing announcement by its ID. The user must be the
        owner of the announcement to update it.
      parameters:
      - description: Announcement ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update Announcement
        in: body
        name: announcement
        required: true
        schema:
          $ref: '#/definitions/models.Announcement'
      responses:
        "200":
          description: Announcement updated successfully
          schema:
            $ref: '#/definitions/utils.AnnouncementSuccessResponse'
        "400":
          description: Could not parse request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: You are not allowed to update this announcement
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Announcement not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Could not update announcement
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update an announcement
      tags:
      - Announcements
  /users/{email}:
    get:
      consumes:
      - application/json
      description: Get a user by their email address
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/utils.UserSuccessResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Retrieve user by email
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/utils.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully with JWT token
          schema:
            $ref: '#/definitions/utils.LoginSuccessResponse'
        "400":
          description: Bad Request - could not parse the request or generate token
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error - server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login a user
      tags:
      - Users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Create a new user in the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/utils.UserSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict - user already exists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Sign up a new user
      tags:
      - Users
schemes:
- http
- https
swagger: "2.0"
